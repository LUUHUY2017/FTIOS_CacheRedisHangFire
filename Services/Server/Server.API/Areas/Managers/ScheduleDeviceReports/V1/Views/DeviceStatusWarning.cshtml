@{
    ViewData["Title"] = "Lập lịch thông báo thiết bị";
    //Layout = "~/Views/Shared/_LayoutManage.cshtml";
} 

<!-- Main content -->
<div class="content-wrapper" id="webui_notiDevice">

    <!-- Inner content -->
    <div class="content-inner">

        <!-- Page header -->
        <div class="page-header page-header-light shadow">
            <div style="padding: 3px 18px !important; " class="page-header-content d-lg-flex">
                <div class="d-flex">
                    <h4 class="page-title mb-0" style="padding: 10px 8px !important; ">
                        <span class="fw-normal">@ViewData["Title"]</span>
                    </h4>

                    <a href="#page_header" class="btn btn-light align-self-center collapsed d-lg-none border-txarent rounded-pill p-0 ms-auto" data-bs-toggle="collapse">
                        <i class="ph-caret-down collapsible-indicator ph-sm m-1"></i>
                    </a>
                </div>
                <div class="collapse d-lg-block my-lg-auto ms-lg-auto" id="page_header">
                    <div class="d-sm-flex align-items-center mb-3 mb-lg-0 ms-lg-3">
                        <div class="d-inline-flex mt-3 mt-sm-0">
                            <div class="pull-right">
                                <a v-on:click="openFormAdd()" class="btn btn-primary " style="margin-right: 5px;"> Thêm mới</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <!-- /page header -->
        <!-- Content area -->

        <div class="content">
            <div class="card">
                <div class="card-body">
                    <form v-on:submit.prevent="loadData">
                        <div class="row mb-3">
                            <div class="col-lg-3 my-1">
                                <label class="form-label">Tìm kiếm theo</label>
                                <select id="filter-option" class="form-select" v-model:value="filter.columnTable">
                                    <option value="scheduleName">Tên lịch gửi</option>
                                </select>
                            </div>
                            <div class="col-lg-3 my-1">
                                <label class="form-label">Trạng thái</label>
                                <select class="form-select"  v-model:value="filter.actived">
                                    <option value="1">Hoạt động</option>
                                    <option value="0">Ngừng hoạt động</option>
                                </select>
                            </div>
                            <div class="col-lg-3 my-1" hidden>
                                <label class="form-label">Trường học</label>
                                <select class="form-control select" data-dropdown-parent="#webui_notiDevice" data-placeholder="Vui lòng chọn tổ chức" id="FOrganization" v-model="filter.organizationId">
                                    <option v-for="option in combobox.organizations" v-bind:value="option.id">
                                        {{ option.organizationName }}
                                    </option>
                                </select>
                            </div>
                            <div class="col-lg-3 my-1">
                                <label class="form-label">Từ khóa tìm kiếm</label>
                                <input type="text" id="key" name="key" placeholder="Nhập từ khóa tìm kiếm" class="form-control" v-model="filter.key">
                            </div>
                            <div class="col-lg-3 my-1 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary" style="margin-right: 5px;">Tìm kiếm</button>
                            </div>

                        </div>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <bootstrap-table :columns="columns" :data="data" :options="options"></bootstrap-table>
                </div>
            </div>

        </div>
    </div>

    <div class="modal hide  fade" id="ModelAddEdit" role="dialog" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">{{object.form_tile}} @ViewData["Title"]</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close"> </button>
                </div>
                <div class="modal-body">
                    <div class="card-body  mb-3">
                        <div class="row_info row">
                            <p>Thông tin</p>
                            <form class="needs-validation" novalidate id="FormAddEdit">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <!--Tên lịch gửi-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Tên lịch gửi<span class="text-danger">*</span></label>
                                            <div class="col-lg-9">
                                                <input type="text" class="form-control" required placeholder="Vui lòng nhập tên lịch gửi" v-model="item.scheduleName">
                                                <div class="invalid-feedback">Vui lòng nhập tên lịch gửi</div>
                                                <div class="valid-feedback"></div>
                                            </div>
                                        </div>
                                        <!--Loại thông báo-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Loại thông báo<span class="text-danger">*</span></label>
                                            <div class="col-lg-9">
                                                <select data-dropdown-parent="#ModelAddEdit" required data-placeholder="Vui lòng chọn loại thông báo" id="scheduleReportType" class="form-control select">
                                                    <option v-for="option in combobox.scheduleReportTypes" v-bind:value="option.id">
                                                        {{ option.name }}
                                                    </option>
                                                </select>
                                                <div class="invalid-feedback">Vui lòng chọn loại thông báo</div>
                                                <div class="valid-feedback"> </div>
                                            </div>
                                        </div>
                                        <!--Tiêu đề thông báo-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Tiêu đề thông báo<span class="text-danger">*</span></label>
                                            <div class="col-lg-9">
                                                <textarea rows="1" class="form-control" required placeholder="Vui lòng nhập tiêu đề" v-model="item.scheduleTitleEmail"></textarea>
                                                <div class="invalid-feedback">Vui lòng nhập tiêu đề</div>
                                                <div class="valid-feedback"></div>
                                            </div>
                                        </div>
                                        <!--Nội dung thông báo-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Nội dung thông báo<span class="text-danger">*</span></label>
                                            <div class="col-lg-9">
                                                <textarea rows="3" class="form-control" required placeholder="Vui lòng nhập nội dung" v-model="item.scheduleContentEmail"></textarea>
                                                <div class="invalid-feedback">Vui lòng nhập nội dung</div>
                                                <div class="valid-feedback"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <!--Tổ chức-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Tổ chức</label>
                                            <div class="col-lg-9">
                                                <select data-dropdown-parent="#ModelAddEdit" data-placeholder="Vui lòng chọn tổ chức" id="organizationId" class="form-control select">
                                                    <option v-for="option in combobox.organizations" v-bind:value="option.id">
                                                        {{ option.organizationName }}
                                                    </option>
                                                </select>
                                                <div class="invalid-feedback">Vui lòng chọn tổ chức </div>
                                                <div class="valid-feedback"> </div>
                                            </div>
                                        </div>
                                        <!--Thời gian gửi-->
                                        <div class="form-group row my-1">
                                            <!--Thời gian bắt đầu gửi-->
                                            <label class="col-form-label col-lg-3">Thời gian gửi từ <span class="text-danger">* </label>
                                            <div class="form-group col-lg-4 row">
                                                <div class="col-lg-12">
                                                    <input type="time" id="scheduleTimeStart" required v-model:value="item.scheduleTimeStart" class="form-control" />
                                                    <div class="invalid-feedback">Vui lòng nhập bắt đầu gửi</div>
                                                    <div class="valid-feedback"></div>
                                                </div>
                                            </div>
                                            <!--Thời gian kết thúc gửi-->
                                            <div class="form-group col-lg-5 row">
                                                <label class="col-form-label col-lg-2">Đến</label>
                                                <div class="col-lg-10">
                                                    <input type="time" id="notificationTimeSEnd" required v-model:value="item.scheduleTimeEnd" class="form-control" />
                                                    <div class="invalid-feedback">Vui lòng nhập kết thúc gửi</div>
                                                    <div class="valid-feedback"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <!--Chu kỳ gửi-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-lg-3">Chu kỳ gửi <span class="text-danger">*</span></label>
                                            <div class="col-lg-9">
                                                <select data-dropdown-parent="#ModelAddEdit" required data-placeholder="Vui lòng chọn chu kỳ gửi" id="scheduleSequentialSending" class="form-control select">
                                                    <option v-for="option in combobox.scheduleSequentialSendings" v-bind:value="option.id">
                                                        {{ option.name }}
                                                    </option>
                                                </select>
                                                <div class="invalid-feedback">Vui lòng chọn chu kỳ thông báo</div>
                                                <div class="valid-feedback"> </div>
                                            </div>
                                        </div>
                                        <!--Định dạng gửi-->
                                        <div class="form-group row">
                                            <label class="col-form-label col-md-3">Định dạng tệp<span class="text-danger">*</span></label>
                                            <div class="col-md-9">
                                                <select data-dropdown-parent="#ModelAddEdit" required data-placeholder="Vui lòng chọn định dạng" id="scheduleExportType" class="form-control select">
                                                    <option v-for="option in combobox.exportTypes" v-bind:value="option.id">
                                                        {{ option.name }}
                                                    </option>
                                                </select>
                                                <div class="invalid-feedback">Vui lòng chọn định dạng </div>
                                                <div class="valid-feedback"> </div>
                                            </div>
                                        </div>
                                        <!--Hoạt động-->
                                        <div class="form-group row my-1">
                                            <label class="col-form-label col-md-3">Hoạt động</label>
                                            <div class="col-lg-9">
                                                <div class="form-check-horizontal">
                                                    <label class="form-check form-switch mb-0">
                                                        <input type="checkbox" class="form-check-input" v-model="item.actived">
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mb-3">
                                    <div class="text-end">
                                        <button type="button" class="btn btn-primary" v-on:click="onClickSaveData()">Lưu dữ liệu</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="card-body" v-if="object.editAction">
                        <div class="row_info row">
                            <div class="col-md-12 text-end">
                                <a v-on:click="onPopupModalSubmitVehicle(null)" style=" margin: 0 0 5px 5px" id="add_row_table" title="Thêm dòng" class=" btn-md btn btn-primary pull-right"> <i class="fa fa-plus"></i> Thêm mới </a>
                            </div>
                            <div class="col-md-12">
                                <bootstrap-table :columns=" columns_selected" :data="data_selected" :options="options"></bootstrap-table>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ModalSubmitVehicle">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Đăng ký người nhận </h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form class="needs-validation" novalidate v-on:submit.prevent="onSubmitFormVehicle" id="FormSubmitVehicle">
                        <div class="box-body">
                            <div class="row_info row">
                                <div class="col-md-12 mb-4">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="col-md-6 col-form-label">Họ tên người nhận<span class="text-danger">*</span></label>
                                                <div class="col-md-12">
                                                    <input type="text" class="form-control" required v-model="item_add.scheduleUserName">
                                                    <div class="invalid-feedback">Vui lòng nhập họ tên </div>
                                                    <div class="valid-feedback"> </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="col-md-6 col-form-label">Email <span class="text-danger">*</span></label>
                                                <div class="col-md-12">
                                                    <input type="email" class="form-control" required v-model="item_add.scheduleEmail">
                                                    <div class="invalid-feedback">Vui lòng nhập email </div>
                                                    <div class="valid-feedback"> </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-12 text-end">
                                            <button id="btnSubmit" type="submit" class="btn  btn-primary ">Cập nhật</button>
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#scheduleExportType').on("change", function () {
            _deviceStatus.item.scheduleExportType = $(this).val();
        });
        $('#scheduleSequentialSending').on("change", function () {
            _deviceStatus.item.scheduleSequentialSending = $(this).val();
        });
        $('#scheduleReportType').on("change", function () {
            _deviceStatus.item.scheduleReportType = $(this).val();
        });
        $('#organizationId').on("change", function () {
            _deviceStatus.item.organizationId = $(this).val();
            _deviceStatus.item.organizationName = $(this).find("option:selected").text()?.trim();
        });
        $('#scheduleDataCollect').on("change", function () {
            _deviceStatus.item.scheduleDataCollect = $(this).val();
        });


        $('#FOrganization').on("change", function () {
            _deviceStatus.filter.organizationId = $(this).val();
        });
        $('#FActived').on("change", function () {
            _deviceStatus.filter.actived = $(this).val();
        });
        $('#FcolumnTable').on("change", function () {
            _deviceStatus.filter.columnTable = $(this).val();
        });
    });

    var _deviceStatus = new Vue({
        el: '#webui_notiDevice',
        components: {
            'BootstrapTable': BootstrapTable
        },
        data: {
            columns: [
                {
                    field: 'Xử lý',
                    title: 'Xử lý',
                    align: 'center',
                    formatter: (value, row, index) => {
                        var ele = `<div style="white-space: nowrap;">`;
                        if (row.actived) {
                            ele += `<a href = "javascript:" class= "btn btn-sm btn-info resend"  title = "Gửi lại báo cáo " > <i class="fa fa-repeat" > </i>  </a > &nbsp;`;
                            ele += `<a href = "javascript:" class= "btn btn-sm btn-warning edit"  title = "Update " > <i class="fa fa-pencil" > </i><span class="sr-only">Update</span > </a > &nbsp;`;
                            ele += `<a href = "javascript:" class= "btn btn-danger btn-sm delete-asset inactive" title="Inactive "> <i class="fa fa-minus-circle" ></i><span class="sr-only">Inactive</span></a> &nbsp;`;
                        }
                        else
                        {
                            ele += `<a href="javascript:" class="btn btn-info btn-sm delete-asset active" title="Active "> <i class="fa fa-plus-square" ></i><span class="sr-only">Active</span></a> &nbsp;`;
                            ele += `<a href="javascript:" class="btn btn-danger btn-sm delete-asset delete" title="Delete "> <i class="fa fa-trash" ></i> <span class="sr-only">Inactive</span></a>&nbsp;`;
                        }
                        ele += ` </div>`;
                        return ele;
                    },
                    events: {
                        'click .edit': function (e, value, row) {
                            _deviceStatus.onPopupModelEdit(row);
                        },
                        'click .resend': function (e, value, row) {
                            _deviceStatus.onResend(row);
                        },
                        'click .delete': function (e, value, row) {
                            var question = "Bạn có chắc chắn muốn xóa dòng này khỏi cơ sở dữ liệu không? sau khi xóa không khôi phục lại được!";
                            var content = "Nhập nội dung xóa (không quá 250 kí tự)";
                            alertify.prompt(question, content, ''
                                , function (evt, value) {
                                    axios.post('/api/v1/ScheduleSendEmail/Delete', { id: row.id, reason: value +" " }, _deviceStatus.object.bearerAuthorization).then(response => {
                                        if (response.data.succeeded) {
                                            alertify.success(response.data.message);
                                            _deviceStatus.loadData();
                                        }
                                        else {
                                            alertify.warning(response.data.message);
                                        }
                                    }).catch(error => {
                                        alert("Lỗi: " + error.response.data.message);
                                    });
                                }, function () {
                                    //alertify.error('Cancel')
                                });
                        },
                        'click .inactive': function (e, value, row) {
                            var question = "Bạn có chắc chắn muốn ẩn dòng này không?";
                            var content = "Nhập nội dung xóa (không quá 250 kí tự)";
                            alertify.prompt(question, content, '', function (evt, value) {
                                axios.post('/api/v1/DeviceNotification/Inactive', { id: row.id, reason: value }, _deviceStatus.object.bearerAuthorization).then(response => {
                                    if (response.data.succeeded) {
                                        alertify.success(response.data.message);
                                        _deviceStatus.loadData();
                                    }
                                    else {
                                        alertify.warning(response.data.message || "Có lỗi xảy ra!");
                                    }
                                }).catch(error => {
                                    console.log(error);
                                    alert("Lỗi: " + error.response.data.message);
                                });
                            }, function () {
                                //alertify.error('Cancel')
                            });
                        },
                        'click .active': function (e, value, row) {
                            var question = "Bạn có chắc chắn muốn kích hoạt dòng này không?";
                            alertify.confirm('Thông báo!', question, function () {
                                axios.post('/api/v1/DeviceNotification/Active', { id: row.id, reason: 'Kích hoạt lại bản ghi' }, _deviceStatus.object.bearerAuthorization).then(response => {
                                    if (response.data.succeeded) {
                                        alertify.success(response.data.message);
                                        _deviceStatus.loadData();
                                    }
                                    else {
                                        alertify.warning(response.data.message || "Có lỗi xảy ra!");
                                    }

                                }).catch(error => {
                                    console.log(error);
                                    alert("Lỗi: " + error.response.data.message);
                                });
                            }, function () { });
                        },
                    },
                },
                {
                    title: "STT",
                    field: "index",
                    formatter: (value, row, index) => {
                        return ++index;
                    }
                },
                {
                    title: "Tên lịch gửi",
                    field: 'scheduleName',
                    sortable: true,
                },
                {
                    title: "Tiêu đề",
                    field: 'scheduleTitleEmail',
                    sortable: true,
                },
                {
                    title: "Nội dung",
                    field: 'scheduleContentEmail',
                    sortable: true,
                },
                {
                    title: "Trường học",
                    field: 'organizationName',
                    sortable: true,
                },
                {
                    title: "Thời gian bắt đầu",
                    field: 'scheduleTimeStart',
                    sortable: true,
                },
                {
                    title: "Thời gian kết thúc",
                    field: 'scheduleTimeEnd',
                    sortable: true,
                },
                {
                    title: "Định dạng gửi",
                    field: 'scheduleExportType',
                    sortable: true,
                },
                {
                    title: "Chu kỳ ",
                    field: 'scheduleSequentialSending',
                    sortable: true,
                },
                {
                    title: "Trạng thái",
                    field: 'actived',
                    sortable: true,
                    formatter: (cell, row) => {
                        return row.actived
                            ? `<span style="color: green; font-weight: bold;">Hoạt động</span>`
                            : `<span style="color: red; font-weight: bold;">Ngừng hoạt động</span>`;
                    },
                },
                {
                    title: "Kiểu thông báo",
                    field: 'scheduleReportType',
                    sortable: true,
                },
            ],
            data: [],
            columns_selected: [
                {
                    field: 'Xử lý',
                    title: 'Xử lý',
                    align: 'center',
                    formatter: (value, row, index) => {
                        var ele = `<div style="white-space: nowrap;">`;
                        if (row.actived) {
                            ele += `<a href = "javascript:" class= "btn btn-danger btn-sm delete-asset send" title="Send "> <i class="fa fa-minus-circle" ></i><span class="sr-only">Send</span></a> &nbsp;`;
                        }
                        ele += `<a href = "javascript:" class= "btn btn-sm btn-warning edit"  title = "Edit " > <i class="fa fa-pencil" > </i><span class="sr-only">Edit</span > </a > &nbsp;`;
                        ele += `<a href="javascript:" class="btn btn-danger btn-sm delete-asset delete" title="Delete "> <i class="fa fa-trash" ></i> <span class="sr-only">Delete</span></a>&nbsp;`;
                        ele += ` </div>`;
                        return ele;
                    },
                    events: {
                        'click .edit': function (e, value, row) {
                            _deviceStatus.onPopupModalSubmitVehicle(row);
                        },
                        'click .delete': function (e, value, row) {
                            var question = "Bạn có chắc chắn muốn xóa dòng này khỏi cơ sở dữ liệu không? sau khi xóa không khôi phục lại được!";
                            alertify.confirm('Thông báo!', question, function () {
                                axios.post('/api/v1/ScheduleSendEmailDetail/Delete', { id: row.id, reason: "deleted" }, _deviceStatus.object.bearerAuthorization).then(response => {
                                    if (response.data.succeeded) {
                                        alertify.success(response.data.message);
                                        _deviceStatus.onGetDetail();
                                    }
                                    else {
                                        alertify.warning(response.data.message);
                                    }
                                }).catch(error => {
                                    alert("Lỗi: " + error.response.data.message);
                                });
                            }, function () {
                                //alertify.error('Cancel')
                            });
                        },
                        // },
                        // 'click .send': function (e, value, row) {
                        //     alert("Send");
                        // },
                    },
                },
                {
                    title: "STT",
                    field: "index",
                    formatter: (value, row, index) => {
                        return ++index;
                    }
                },
                {
                    title: "Tên người nhận",
                    field: 'scheduleUserName',
                    sortable: true,
                },
                {
                    title: "Email",
                    field: 'scheduleEmail',
                    sortable: true,
                },
            ],
            data_selected: [],
            combobox: {
                organizations: [],
                scheduleReportTypes: [],
                scheduleSequentialSendings: [],
                exportTypes: [
                ],
            },
            options: {
                search: true,
                pagination: true,
                showExtendedPagination: true,
                showExport: false,
                sortable: true,
                searchAlign: 'right',
                paginationHAlign: 'right',
                paginationDetailHAlign: 'right',
                pageSize: 25,
                pageList: [10, 25, 50, 100, 200],
            },
            filter: {
                columnTable: "scheduleName",
                key: "",
                organizationId: "0",
                actived: "1",
            },
            object: {
                dateNow: formatDateTime(new Date()),
                editAction: false,
                infoAction: false,
                bearerAuthorization: {
                    headers: { Authorization: `Bearer @Model`, 'Content-Type': 'application/json' }
                }
            },

            item: {
                scheduleContentEmail: "Cảnh báo thiết bị mất kết nối",
                organizationId: "0",
                actived: true,
            },
            item_add: {},
            
        },
        methods: {
            loadData() {
                $('.loader').show();
                axios.post('/api/v1/DeviceNotification/Gets', this.filter, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }
                    $('.loader').delay(100).hide(0);

                    this.data = response.data.data;
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                    console.log(error);
                });
            },

            openFormAdd() {
                this.object.editAction = false;
                this.onResetForm();
                this.item.scheduleTitleEmail = `AMMS.IOT Device notification`;
                this.item.scheduleContentEmail = `Cảnh báo thiết bị mất kết nối`;
                bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit')).show();
            },

            onResetForm() {
                this.item = { actived: true };
                this.data_selected = [];
                this.item_add = {};
                resetFormJs();

                $('#scheduleReportType').val(null).trigger('change');
                $('#scheduleExportType').val(null).trigger('change');
                $('#scheduleSequentialSending').val(null).trigger('change');
                $('#organizationId').val(0).trigger('change');
                //$('#scheduleDataCollect').val(null).trigger('change');
            },

            onPopupModelEdit(row, editAction) {

                this.object.editAction = true;
                this.item = row;

                $('#scheduleReportType').val(this.item.scheduleReportType).trigger('change');
                $('#scheduleExportType').val(this.item.scheduleExportType).trigger('change');
                $('#scheduleSequentialSending').val(this.item.scheduleSequentialSending).trigger('change');
                $('#organizationId').val(this.item.organizationId).trigger('change');
                //$('#scheduleDataCollect').val(this.item.scheduleDataCollect).trigger('change');

                _deviceStatus.onGetDetail();
                bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit')).show();
            },

            onClickSaveData() {
                if (!validateForm("#FormAddEdit")) {
                    return true;
                }

                $('.loader').show();
                axios.post('/api/v1/DeviceNotification/Edit', this.item, this.object.bearerAuthorization).then(response => {
                    $('.loader').hide(0);
                    if (response.data.succeeded) {
                        _deviceStatus.object.editAction = true;

                        _deviceStatus.item = response.data.data;
                        alertify.success(response.data.message);
                        _deviceStatus.loadData();

                       // bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit')).hide();
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }
                }).catch(error => {
                    $('.loader').hide(0);
                    console.log(error);
                });
            },

            onFormSelect() {
                bootstrap.Modal.getOrCreateInstance(document.getElementById('FormSelectNoti')).show();
            },

            onPopupModalSubmitVehicle(data) {
                try {
                    resetFormJs();
                    if (data == null) { this.item_add = { orderId: this.item.id }; }
                    else this.item_add = data;
                    bootstrap.Modal.getOrCreateInstance(document.getElementById('ModalSubmitVehicle')).show();
                } catch (e) {
                    console.log(e);
                }
            },

            onGetDetail() {
                $('.loader').show();
                axios.get('/api/v1/ScheduleSendEmailDetail/Get?sheduleId=' + this.item.id, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;

                    $('.loader').delay(100).hide(0);
                    if (response.data.succeeded)
                        this.data_selected = response.data.data;

                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                    console.log(error);
                });
            },

            onResend(row) {
                $('.loader').show();
                axios.get('/api/v1/DeviceNotification/Resend?id=' + row.id, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;
                    $('.loader').delay(100).hide(0);
                   
                    if (response.data.succeeded)
                        alertify.success("Thao tác thành công!");

                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                    console.log(error);
                });
            },

            onSubmitFormVehicle() {
                if (!validateForm("#FormSubmitVehicle")) {
                    return true;
                }
                $(".loader").show();


                this.item_add.scheduleId = this.item.id;

                axios.post('/api/v1/ScheduleSendEmailDetail/Edit', this.item_add, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;

                    $(".loader").delay(100).hide(0);
                    alertify.success(response.data.message);
                    bootstrap.Modal.getOrCreateInstance(document.getElementById('ModalSubmitVehicle')).hide();

                    _deviceStatus.onGetDetail();
                    _deviceStatus.loadData();


                }).catch((error) => {
                    console.log(error);
                    $(".loader").delay(100).hide(0);
                });
            },
            getCookie(name) {
                const value = "; " + document.cookie;
                const parts = value.split("; " + name + "=");
                if (parts.length === 2) return parts.pop().split(";").shift();
            },
            loadCombox() {
                axios.get('/api/v1/Organization/Gets', this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('Auth/Login')) {
                        window.location = window.location.href;
                    }
                    this.combobox.organizations = [{ id: "0", organizationName: "Tất cả" }, ...response.data.data];
                    if (this.getCookie("organizationId")) {
                        console.log(this.getCookie("organizationId"));
                        this.filter.organizationId = this.getCookie("organizationId");
                        $('#FOrganization').val(this.filter.organizationId);
                    }
                    else {
                        this.filter.organizationId = this.combobox.organizations[0].id;
                        $('#FOrganization').val(this.filter.organizationId);
                    }

                    this.loadData();
                }).catch(error => {
                    console.warn(error);
                });

                axios.get('/api/v1/ScheduleSendEmail/ScheduleEmailOptions', this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;

                    this.combobox.scheduleReportTypes = response.data.reportTypesDevice;
                    //this.combobox.dataCollectTypes = response.data.dataCollectTypes;
                    this.combobox.scheduleSequentialSendings = response.data.sequentialSendingsDevice;
                    this.combobox.exportTypes = response.data.exportTypes;
                }).catch(error => {
                    console.log(error);
                });
            },
        },
        mounted() {
            this.loadData();
            this.loadCombox();
        },
        
    })
</script>

