@{
    ViewData["Title"] = "Khai báo khuôn mặt";
    Layout = "~/Views/Shared/_LayoutManage.cshtml";
}


<!-- Main content -->
<div class="content-wrapper" id="webui">

    <!-- Inner content -->
    <div class="content-inner">

        <!-- Page header -->
        <div class="page-header page-header-light shadow">
            <div style="padding: 3px 18px !important; " class="page-header-content d-lg-flex">
                <div class="d-flex">
                    <h4 class="page-title mb-0" style="padding: 10px 8px !important; ">
                        <span class="fw-normal">@ViewData["Title"]</span>
                    </h4>
                </div>
                <div class="d-lg-block my-lg-auto ms-lg-auto" id="page_header">
                    <div class="d-sm-flex align-items-center mb-3 mb-lg-0 ms-lg-3">
                        <div class="d-inline-flex mt-3 mt-sm-0">
                            <div class="pull-right">
                                @* <a v-on:click="onPopupModelEdit(null)" class="btn btn-primary " style="margin-right: 5px;"> Đồng bộ học sinh</a> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <!-- /page header -->
        <!-- Content area -->
        <div class="content">
            <div class="card">
                <div class="card-body">
                    <form v-on:submit.prevent="onLoadData">
                        <div class="row mb-3">
                            <div class="col-md-2">
                                <label class="form-label">Trường học</label>
                                <select id="schoolLevelCode" class="form-control select" v-model:value="dtoClass.schoolLevelCode">
                                    <option selected value="">Vui lòng chọn trường học </option>
                                    <option v-for="option in combobox.schools" v-bind:value="option.schoolLevelCode">
                                        {{ option.schoolLevelName }}
                                    </option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Năm học</label>
                                <select id="schoolYearId" class="form-control select" v-model:value="dtoClass.schoolYearId">
                                    <option selected value="">Vui lòng chọn năm học </option>
                                    <option v-for="option in combobox.schoolYears" v-bind:value="option.schoolYearId">
                                        {{ option.code }}
                                    </option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Lớp</label>
                                <select id="classId" class="form-control select">
                                    <option selected value="">Vui lòng chọn lớp </option>
                                    <option v-for="option in combobox.classes" v-bind:value="option.id">
                                        {{ option.className }}
                                    </option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary" style="margin-right: 5px;">Tìm kiếm</button>
                            </div>

                        </div>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-body">

                    <div id="table" class="table-responsive">
                        <table class="table table-bordered table-striped  table-hover">
                            <thead class="">
                                <tr>
                                    <th>Stt</th>
                                    <th> Thao tác </th>
                                    <th> Mã học sinh </th>
                                    <th> Họ tên </th>
                                    <th> Giới tính </th>
                                    <th> Năm sinh </th>
                                    <th> Căn cước </th>
                                    <th> Khối </th>
                                    <th> Lớp </th>
                                    <th> Trạng thái </th>
                                    <th> Thời gian cập nhật  </th>
                                </tr>
                                <tr>
                                    <th>
                                        <button type="button" class="btn btn-primary" v-on:click="onLoadData(true)"> <i class="fa fa-search"></i> </button>
                                    </th>
                                    <th> </th>
                                    <th>
                                        <input type="text" class="form-control" v-model="params.studentCode">
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " v-model="params.fullName">
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " disabled>
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " disabled>
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " v-model="params.identifyNumber">
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " v-model="params.gradeCode">
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " v-model="params.className">
                                    </th>
                                    <th>
                                        <input type="text" class="form-control " v-model="params.status">
                                    </th>
                                    <th>
                                        <input type="datetime" class="form-control " disabled readonly id="createdDate">
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(item, index) in data">
                                    <td><span>{{index  +1 }}</span></td>
                                    <td><a v-on:click="onPopupModelEdit(item)" class="btn btn-sm btn-info edit" title="Cập nhật đăng ký "> <i class="fa fa-cogs"> </i> </a></td>
                                    <td style=" white-space: nowrap;"><span>{{item.studentCode}}</span></td>
                                    <td style=" white-space: nowrap;"><span>{{item.fullName}}</span></td>
                                    <td style=" white-space: nowrap;">
                                        <span v-if="item.genderCode == '01'" class='badge bg-primary bg-opacity-10 text-primary'>Nam</span>
                                        <span v-else class='badge bg-warning bg-opacity-10 text-warning'>Nữ</span>
                                    </td>
                                    <td style=" white-space: nowrap;">
                                        <span>{{ formatDate(item.dateOfBirth) }}</span>
                                    </td>
                                    <td><span>{{item.identifyNumber}}</span></td>
                                    <td><span>{{item.gradeCode}}</span></td>
                                    <td><span>{{item.className}}</span></td>
                                    <td style=" white-space: nowrap;"><span>{{item.status}}</span></td>
                                    <td style=" white-space: nowrap;">
                                        <span>{{ formatDateTime(item.lastModifiedDate) }}</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="phan-trang " style="width: 100%;">
                        <div class="fixed-table-pagination">
                            <div class="row">
                                <div style="float:left" class="col-md-8">
                                    <div style=" margin-top: 10px !important; overflow:hidden" class=" pagination">
                                        <ul id="pagingNumbers" class="pagination" style="margin: 0px !important;">  </ul>
                                    </div>
                                </div>

                                <div style="float: right;text-align: right;" class="col-md-4 ">
                                    <div style=" margin-top: 10px !important; " class=" pagination-detail">
                                        <span class="pagination-info">
                                            Showing {{firstRow}} to {{totalDataRowNext}} of {{totalRow}} rows
                                        </span>
                                        <span class="page-list">
                                            <select v-model:value="filter.RowsPerPage" id="RowsPerPage" class=" " v-on:change="renderRowOnPage()">
                                                <option value="10">10</option>
                                                <option selected value="25">25</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                                <option value="250">250</option>
                                            </select>
                                            rows per page
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ModelAddEdit" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">{{object.form_tile}}</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close"></button>
                </div>
                <form class="form-horizontal has-validation-callback" v-on:submit.prevent="onSubmitFormAddEdit" id="FormAddEdit">
                    <div class="modal-body">
                        <div class="box">
                            <div class="row">
                                <div class="row ">
                                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                    <div class="col-md-2">
                                        <div class="form-group mb-3">
                                            <div class="text-center" id="khung-chup">
                                                <div class="anh-chup image-div">
                                                    <a id="aoutput" data-fancybox="gallery" v-bind:href="item.imageSrc">
                                                        <img id="output" v-bind:src="item.imageSrc">
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-12 col-sm-12  ">
                                                <input type="file" id="imageInput" class="form-control mb-2" accept="image/*">
                                                <button type="button" id="openModalCapture" class="btn  btn-primary d-none d-md-block"> <i class="ph-camera ph me-3"></i>  Chụp ảnh </button>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-5">
                                        <label class="col-md-4 control-label text-nowrap fw-bold mb-1 ">Mã học sinh   </label>
                                        <div class="col-md-10 col-sm-12  ">
                                            <input class="form-control  mb-1 " type="text" readonly required id="studentCode" name="studentCode" v-model:value="item.studentCode">
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label text-nowrap fw-bold mb-1">Căn cước  </label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <input class="form-control  mb-1 " type="text" readonly required id="identifyNumber" name="identifyNumber" v-model:value="item.identifyNumber">
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-md-4 control-label text-nowrap fw-bold mb-1">Lớp  </label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <input class="form-control  mb-1  " type="text" readonly required id="className" name="className" v-model:value="item.className">
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label  text-nowrap fw-bold mb-1">Giới tính</label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <label> <input type="radio" class="form-check-input" disabled required v-model:value="item.genderCode" value="01"> Nam</label>
                                                <label> <input type="radio" class="form-check-input" disabled required v-model:value="item.genderCode" value="02">Nữ </label>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <label class="col-md-4 control-label  text-nowrap fw-bold mb-1">Họ và tên    </label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <input type="text" id="fullName" name="fullName" readonly required class="form-control  mb-1  " v-model:value="item.fullName">
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label text-nowrap fw-bold mb-1">Trạng thái </label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <input type="text" id="status" name="status" readonly required class="form-control  mb-1  " v-model:value="item.status">
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-md-4 control-label  text-nowrap fw-bold mb-1">Năm sinh</label>
                                            <div class="col-md-10 col-sm-12  ">
                                                <input type="text" id="syncCode" name="syncCode" readonly required class="form-control  mb-1" v-model:value="item.dateOfBirth1">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="text-end">
                            <button type="button" class="btn mr-5" data-bs-dismiss="modal"> Bỏ qua </button>
                            <button type="submit" class="btn btn-primary"> Lưu </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ModelImage" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">Cắt ảnh</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <img id="image" style="max-width: 100%; display: none;">
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="text-end">
                        <button id="cropBtn" type="button" class="btn btn-primary "> <i class="ph-crop me-2"></i> Cắt ảnh </button>
                        <button type="button" class="btn mr-5" data-bs-dismiss="modal"> Bỏ qua </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ModelCapture" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">Chụp ảnh</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close closeC"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12 col-md-6">
                            <video id="video" autoplay></video>
                            <button type="button" id="capturePhoto" class="btn  btn-primary"><i class="ph-camera ph me-2"></i>  Chụp ảnh </button>
                            <button style="display:none" type="button" id="switchCamera" class="btn  btn-primary"><i class="ph-arrows-ph me-2"></i> Switch </button>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <canvas id="canvas" style="display: none;"></canvas>
                            <div class="div-image-capture ">
                                <img id="capturedImage" alt="Captured Photo" style="display: none;" />
                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="text-end">
                        <button id="cropPhoto" type="button" class="btn btn-primary "> <i class="ph-crop me-2"></i> Cắt ảnh </button>
                        <button type="button" class="btn mr-5 closeC" data-bs-dismiss="modal"> Đóng </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    connection.on("RefreshStudent", function (data) {
        var data1 = JSON.parse(data);
        _stu.onLoadData();
    });

    $(document).ready(function () {
        $('#schoolLevelCode').on("change", function () {
            _stu.dtoClass.schoolLevelCode = $(this).val() ?? null;

            _stu.combobox.classes = [];
            _stu.combobox.data = [];

            _stu.onPostClass();
            _stu.onLoadData();

            localStorage.setItem('schoolLevelCode', $(this).val());

        });

        $('#schoolYearId').on("change", function () {
            _stu.filter.schoolYearId = $(this).val() ?? null;
            _stu.dtoClass.schoolYearId = $(this).val() ?? null;
            _stu.dtoClass.schoolyear = $(this).find(":selected").text()?.trim() ?? null;

            _stu.combobox.classes = [];
            _stu.combobox.data = [];

            _stu.onPostClass();
            _stu.onLoadData();


            localStorage.setItem('schoolYearId', $(this).val()) ?? null;
            localStorage.setItem('schoolyear', $(this).find(":selected").text()?.trim()) ?? null;

        });

        $('#classId').on("change", function () {
            _stu.params.classId = $(this).val() ?? null;

            _stu.combobox.data = [];
            _stu.onLoadData();
        });

        $("ul.pagination").on("click", "li", function () {
            var pageNumber = $(this).find("a").data('number');
            if (pageNumber != undefined) {
                _stu.filter.CurentPage = pageNumber;
                _stu.onLoadData();
            }

        });
    });

</script>


<script>
    var _stu = new Vue({
        el: '#webui',
        components: {
            // 'BootstrapTable': BootstrapTable
        },
        data: {
            data: [],

            filter: {
                RowsPerPage: 50,
                CurentPage: 1,
                FilterItems: [],
            },
            params: {
                studentCode: null,
                fullName: null,
                genderCode: null,
                dateOfBirth: null,
                className: null,
                classId: null,
                status: null,
            },

            dtoClass: {
                schoolLevelCode: null,
                schoolYearId: null,
                schoolyear: null,
            },
            object: {
                dateNow: formatDateTime(new Date()),
                config: {
                    headers: { Authorization: `Bearer @Model`, 'Content-Type': 'application/json' }
                }
            },
            item: {},
            combobox: { schools: [], schoolYears: [], classes: [] },
            // phân trang
            firstRow: 0,
            totalRow: 0,
            totalDataRowNext: 0,
            curentPage: 0,
            rowsPerPage: 50,


        },
        methods: {
            onLoadData(resetPage) {
                $('.loader').show();
                this.checkParams();
                if (resetPage)
                    this.filter.CurentPage = 1;


                axios.post('/api/v1/Student/Post', this.filter, this.object.config).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }
                    if (response.data.succeeded) {

                        this.data = response.data.data.items;

                        this.totalRow = parseInt(response.data.data.totalRow);
                        this.firstRow = parseInt((parseInt(this.filter.CurentPage) - 1) * parseInt(this.filter.RowsPerPage) + 1);
                        this.totalPage = parseInt(response.data.data.totalPage);

                        this.totalDataRowNext = parseInt(parseInt(this.firstRow) + parseInt(response.data.data.totalDataRow) - 1);

                        const pagingNumbers = $('#pagingNumbers');
                        this.renderPagination(pagingNumbers, this.totalPage, this.filter.CurentPage);
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }

                    $('.loader').delay(100).hide(0);
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                });
            },

            checkParams() {
                this.filter.FilterItems = [];
                Object.entries(this.params).forEach(([key, value]) => {
                    if (value !== null) {
                        this.filter.FilterItems.push({
                            propertyName: key,
                            comparison: 0,
                            value: value
                        });
                    }
                });
            },
            renderPagination(pagingNumbers, totalPage, currentPage) {
                pagingNumbers.empty(); // Clear previous content

                if (currentPage > 6) {
                    pagingNumbers.append(`<li class="page-item page-pre"><a class="page-link" data-number="1"> <i class="fa fa-step-backward" ></i> </a></li>`);
                }

                // Hiển thị nút quay về đầu trang
                if (currentPage > 1) {
                    pagingNumbers.append(`<li class="page-item page-pre"><a class="page-link" data-number="${currentPage - 1}"> <i class="fa fa-caret-left" ></i> </a></li>`);
                    pagingNumbers.append(`<li class="page-item page-pre"><a class="page-link" data-number="1">1</a></li>`);
                }

                // Nếu trang hiện tại  >3 và tổng trang hơn 6 trang sẽ hiển thị ....
                if (currentPage > 3 && totalPage > 6) {
                    pagingNumbers.append('<li class="page-item disabled"><a class="page-link">...</a></li>');
                }

                //Hiển thị các trang sau trang hiện tại (tối đa 3 trang sau)
                const endPage = Math.min(currentPage + 3, totalPage);
                for (let i = currentPage; i <= endPage; i++) {
                    pagingNumbers.append(`<li class="page-item ${currentPage == i ? 'active' : ''}"><a class="page-link" data-number="${i}"> ${i}</a></li>`);
                }

                // Chỉ hiển thị ba số trang cuối cùng nếu tổng số trang nhiều hơn 3
                if (totalPage > 6 && currentPage + 3 < totalPage) {
                    pagingNumbers.append('<li class="page-item disabled"><a class="page-link">...</a></li>');

                    const startLast = Math.max(totalPage - 2, currentPage + 1);
                    for (let i = startLast; i <= totalPage; i++) {
                        pagingNumbers.append(`<li class="page-item ${currentPage == i ? 'active' : ''}"><a class="page-link" data-number="${i}">${i}</a></li>`);
                    }
                }

                // trang next cuối
                if (currentPage < totalPage) {
                    pagingNumbers.append(`<li class="page-item page-next"><a class="page-link" data-number="${currentPage + 1}"> <i class="fa fa-caret-right" ></i> </a></li>`);
                    pagingNumbers.append(`<li class="page-item page-next"><a class="page-link" data-number="${totalPage}"><i class="fa fa-step-forward" ></i></a></li>`);
                }
            },
            renderRowOnPage() {
                this.filter.CurentPage = 1;
                this.onLoadData();
            },


            formatDateTime(date) {
                let data = date != null ? moment(date).format('DD/MM/YYYY HH:mm:ss') : null;
                return data;
            },

            formatDate(value) {
                if (value != null) {
                    var dt = new Date(value);
                    var mth = dt.getMonth() + 1;
                    var day = dt.getDate();
                    if (mth < 10)
                        mth = "0" + mth;
                    if (day < 10)
                        day = "0" + day;

                    return day + '/' + mth + '/' + dt.getFullYear();
                } else
                    return null;
            },

            onResetForm() {
                this.item = {};
            },
            onPopupModelEdit(row) {
                const el = { ...row };

                this.item = el;
                try { this.item.dateOfBirth1 = ConvertDinhDangNgay(el.dateOfBirth); } catch (Ex) { }
                try { this.item.imageSrc = el.imageBase64 != null ? "data:image/png;base64," + el.imageBase64 : null } catch (Ex) { }
                this.item = { ...this.item };

                this.object.form_tile = "Thông tin học sinh";
                bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit')).show();
            },

            onSubmitFormAddEdit() {
                if (!validateForm("#FormAddEdit"))
                    return true;

                $('.loader').show();
                axios.put('/api/v1/Student/Edit', this.item, this.object.config).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;

                    $('.loader').hide(0);
                    if (response.data.succeeded) {
                        _stu.onLoadData();

                        bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit')).hide();
                        alertify.success(response.data.message);
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }
                }).catch(error => {
                    $('.loader').hide(0);

                });
            },

            onLoadCombobox() {
                axios.post('/api/v1/StudentSmas/PostSchool', null, this.object.config).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }
                    if (response.data.succeeded) {
                        this.combobox.schools = {
                            ...response.data.data.schools
                        };
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }
                    $('.loader').delay(100).hide(0);
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                })

                axios.post('/api/v1/StudentSmas/PostSchoolYears', null, this.object.config).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }

                    if (response.data.succeeded) {
                        this.combobox.schoolYears = {
                            ...response.data.data.schoolYears
                        };

                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }
                    $('.loader').delay(100).hide(0);
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                })


            },
            onPostClass() {
                axios.post('/api/v1/StudentSmas/PostClass', this.dtoClass, this.object.config).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }

                    if (response.data.succeeded) {
                        this.combobox.classes = {
                            ...response.data.data.classes
                        };
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }
                    $('.loader').delay(100).hide(0);
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                })
            },

            onLoadLocalStorage() {
                const _schoolLevelCode = localStorage.getItem('schoolLevelCode');
                if (_schoolLevelCode) {
                    this.dtoClass.schoolLevelCode = _schoolLevelCode;
                } else {
                    this.dtoClass.schoolLevelCode = "";
                }


                const _schoolYearId = localStorage.getItem('schoolYearId');
                if (_schoolYearId) {
                    this.dtoClass.schoolYearId = _schoolYearId;
                    this.filter.schoolYearId = _schoolYearId;
                } else {
                    this.dtoClass.schoolYearId = "";
                    this.filter.schoolYearId = "";;
                }


                const _schoolyear = localStorage.getItem('schoolyear');
                if (_schoolyear) {
                    this.dtoClass.schoolyear = _schoolyear;
                } else {
                    this.dtoClass.schoolyear = "";
                }
            },
        },
        mounted() {
            this.onLoadLocalStorage();

            this.onLoadCombobox();
            this.onPostClass();
            this.onLoadData();

        },
    })
</script>


<script>
    let cropper;
    const image = document.getElementById('image');
    const aoutput = document.getElementById('aoutput');
    const imageInput = document.getElementById('imageInput');
    const cropBtn = document.getElementById('cropBtn');
    const croppedImage = document.getElementById('croppedImage');

    imageInput.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelImage')).show();

            const reader = new FileReader();
            reader.onload = function (event) {
                image.src = event.target.result;
                image.style.display = 'block';

                if (cropper) {
                    cropper.destroy();
                }

                cropper = new Cropper(image, {
                    preview: '.preview',
                    aspectRatio: 1, // Tỉ lệ hình vuông
                    viewMode: 1,
                    autoCropArea: 1, // Vùng crop bao phủ toàn bộ ảnh
                    movable: true,
                    zoomable: true,
                });
            };
            reader.readAsDataURL(file);
        }
        imageInput.value = '';
    });

    // Handle the crop button
    cropBtn.addEventListener('click', function () {
        const canvas = cropper.getCroppedCanvas({
            width: 250,
            height: 300
        });

        let _img = canvas.toDataURL('image/png');
        let imgBase64 = _img.replace('data:image/png;base64,', '')
            .replace('data:image/jpeg;base64,', '')
            .replace('data:image/gif;base64,', '')
            .replace('data:image/heic;base64,', '')
            //.replace('data:image/webp;base64,', '')
            .replace('data:image/jpg;base64,', '');


        _stu.item.imageSrc = _img;
        _stu.item.imageBase64 = imgBase64;

        aoutput.style.display = 'block';
        bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelImage')).hide();
    });
</script>

<script>
    const modal = document.getElementById("cameraModal");
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const capturedImage = document.getElementById("capturedImage");
    const capturePhoto = document.getElementById("capturePhoto");
    const cropPhoto = document.getElementById("cropPhoto");
    const openModalCapture = document.getElementById("openModalCapture");
    const closeModals = document.querySelectorAll(".closeC");
    const switchCameraButton = document.getElementById('switchCamera');

    let currentStream;
    let isFrontCamera = true;
    const constraints = {
        video: {
            facingMode: 'user'
        }
    };



    openModalCapture.addEventListener('click', function () {
        bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelCapture')).show();
        startCamera();
    });

    function startCamera() {
        navigator.mediaDevices.getUserMedia(constraints)
            .then(stream => {
                currentStream = stream;
                video.srcObject = stream;
            })
            .catch(error => {
                console.error('Error accessing the camera: ', error);
            });
    }
    function closeModal() {
        bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelCapture')).hide();

        capturedImage.src = null;
        let stream = video.srcObject;
        let tracks = stream.getTracks();
        tracks.forEach(track => track.stop());
        video.srcObject = null;

        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    }
    function switchCamera() {
        // Stop the current stream
        if (currentStream) {
            currentStream.getTracks().forEach(track => track.stop());
        }
        // Toggle the camera
        isFrontCamera = !isFrontCamera;
        constraints.video.facingMode = isFrontCamera ? 'user' : 'environment';
        // Restart the camera with the new constraints
        startCamera();
    }

    capturePhoto.addEventListener('click', function () {
        capturedImage.src = null;

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const context = canvas.getContext("2d");
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        const dataURL = canvas.toDataURL("image/png");
        capturedImage.src = dataURL;
        capturedImage.style.display = "block";
        document.getElementById("cropBtn").style.display = "block";


        if (cropper) {
            cropper.destroy();
            cropper = null;
        }


        cropper = new Cropper(capturedImage, {
            preview: '.preview',
            aspectRatio: 1, // Tỉ lệ hình vuông
            viewMode: 1,
            autoCropArea: 1, // Vùng crop bao phủ toàn bộ ảnh
            movable: true,
            zoomable: true,
        });



    });

    cropPhoto.addEventListener('click', function () {
        const croppedCanvas = cropper ? cropper.getCroppedCanvas() : null;
        const croppedDataURL = croppedCanvas.toDataURL("image/png");
        // Display the cropped image result
        capturedImage.src = croppedDataURL;

        let imgBase64 = croppedDataURL.replace(/^data:image\/(png|jpeg|gif|heic|webp|jpg);base64,/, '');

        _stu.item.imageSrc = croppedDataURL;
        _stu.item.imageBase64 = imgBase64;

    });

    closeModals.forEach(item => {
        item.addEventListener("click", function () {
            closeModal();
        });
    });

    switchCameraButton.addEventListener('click', switchCamera);

    window.onclick = function (event) {
        if (event.target == modal)
            closeModal();
    }


</script>
