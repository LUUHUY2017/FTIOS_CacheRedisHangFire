<!--Email-->
<div class="card shadow-sm rounded-0" id="webui_dBSendEmail" style="min-height: 215px;">
    <div class="card-body">
        <!--Tilte-->
        <h5 class="text-start">Thống kê gửi email</h5>
        <div class="row mt-2 px-2">
            <!-- Dòng thống kê tổng số email đã gửi -->
            <div class="d-flex justify-content-between align-items-center underline-dashed px-0">
                <span>Tổng số email đã gửi</span>
                <span class="dots"></span>
                <span class="fw-bold" v-on:click="onClickCell(null)" style="cursor: pointer;">{{data_Total.totalSendEmail}}</span>
            </div>
            <!-- Dòng thống kê email thành công -->
            <div class="d-flex justify-content-between align-items-center mt-2 underline-dashed px-0">
                <span>Số email gửi thành công</span>
                <span class="dots"></span>
                <span>
                    <span class="fw-bold text-success" v-on:click="onClickCell('1')" style="cursor: pointer;">{{data_Total.totalSendSuccess}}</span>
                    ({{(data_Total.totalSendSuccess / data_Total.totalSendEmail * 100).toFixed(2)}}%)
                </span>
            </div>
            <!-- Dòng thống kê email thất bại -->
            <div class="d-flex justify-content-between align-items-center mt-2 underline-dashed px-0">
                <span>Số email gửi thất bại</span>
                <span class="dots"></span>
                <span>
                    <span class="fw-bold text-danger" v-on:click="onClickCell('0')" style="cursor: pointer;">{{data_Total.totalSendFail}}</span>
                    ({{(data_Total.totalSendFail / data_Total.totalSendEmail * 100).toFixed(2)}}%)
                </span>
            </div>
            <!-- Nút See More -->
            <div class="col text-start mt-2 px-0">
                <a href="/V1/AutoReportMonitor" class="text-end">Xem thêm</a>
            </div>
        </div>
    </div>

    <!--ModelForm-->
    <!-- Modal -->
    <div class="modal hide fade" id="ModelInfo_SendEmail" role="dialog" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">Lịch sử gửi email</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close"> </button>
                </div>

                <div class="card-body">
                    <form v-on:submit.prevent="onFilter">
                        <div class="row mb-3  ">
                            <div class="col-md-3">
                                <label class="form-label">Từ ngày</label>
                                <datetime type="date"
                                          v-model="filter.startDate"
                                          class="form-control p-0" input-class="w-100 py-12 px-2 border-0"
                                          placeholder="Vui lòng chọn thời gian...">
                                </datetime>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Đến ngày</label>
                                <datetime type="date"
                                          v-model="filter.endDate"
                                          class="form-control p-0" input-class="w-100 py-12 px-2 border-0"
                                          placeholder="Vui lòng chọn thời gian...">
                                </datetime>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Trường học</label>
                                <select class="form-select select" required data-placeholder="Vui lòng chọn trường học" id="FOrganization">
                                    <option v-for="option in combobox.organizations" v-bind:value="option.id">
                                        {{ option.organizationName }}
                                    </option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Trạng thái</label>
                                <select id="FSent" class="form-control select">
                                    <option selected :value="null">Tất cả </option>
                                    <option value="1">Thành công </option>
                                    <option value="2">Đang chờ </option>
                                    <option value="0">Lỗi </option>
                                </select>
                            </div>

                        </div>
                        <div class="row ">
                            <div class="col-lg-3">
                                <button type="submit" class="btn btn-primary" style="margin-right: 5px;">Tìm kiếm</button>
                            </div>
                        </div>
                    </form>

                </div>

                <div class="card-body">
                    <div class=" row">
                        <div class="col-md-12">
                            <bootstrap-table :columns="columns" :data="data" :options="options"></bootstrap-table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal hide fade" id="ModelAddEdit_SendEmail" role="dialog" aria-hidden="true">
        <div id="waitDialog" class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="staticBackdropLabel" class="modal-title">Chi tiết gửi</h5>
                    <button type="button" data-bs-dismiss="modal" aria-label="Close" class="btn-close"> </button>
                </div>
                <div class="modal-body">
                    <div class="card-body">
                        <div class=" row">
                            <div class="col-md-12">
                                <bootstrap-table :columns=" columns_selected" :data="data_selected" :options="options"></bootstrap-table>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <!--/ModelForm-->

</div>
<!--/Email-->
<script>
    $(document).ready(function () {
        $("#FSent").on("change", function () {
            _dBSendEmail.filter.sent = $(this).val();
        });
        $('#FOrganization').on("change", function () {
            _dBSendEmail.filter.organizationId = $(this).val();
        });
    });
    var _dBSendEmail = new Vue({
        el: '#webui_dBSendEmail',
        components: {
            'BootstrapTable': BootstrapTable
        },
        data: {
            columns: [
                {
                    title: "Stt",
                    field: 'sothutu',
                    sortable: true,
                    formatter: (value, row, index) => {
                        var stt = index + 1;
                        return "<span class ='black'> " + stt + "  </span>";
                    },
                },
                {
                    field: 'Xử lý',
                    title: 'Xử lý',
                    sortable: true,
                    align: 'center',
                    formatter: (value, row, index) => {
                        var ele = `<div style="white-space: nowrap;">`;
                        ele += `<a href = "javascript:" class= "btn btn-sm btn-info view" title = "Xem chi tiết" > <i class="fa fa-info-circle" ></i></a > &nbsp;`;
                        ele += `<a href = "javascript:" class= "btn btn-sm btn-warning edit" title = "Gửi lại " > <i class="fa fa-repeat" > </i> </a > &nbsp;`;
                        ele += ` </div>`;
                        return ele;
                    },
                    events: {
                        'click .view': function (e, value, row) {
                            _dBSendEmail.onPopupModelEdit(row);
                        },
                        'click .edit': function (e, value, row) {
                            var question = "Bạn có chắc chắn muốn kích hoạt dòng này không?";
                            alertify.confirm('Thông báo!', question, function () {
                                row.sent = null;
                                row.timeSent = null;
                                row.numberOfResend = null;
                                axios.put('/api/v1/SendEmail/Edit', row, _dBSendEmail.object.bearerAuthorization).then(response => {
                                    if (response.data.succeeded) {
                                        alertify.success(response.data.message);
                                        _dBSendEmail.onFilter()
                                    }
                                    else {
                                        alertify.warning(response.data.message || "Có lỗi xảy ra!");
                                    }

                                }).catch(error => {
                                    console.log(error);
                                    alert("Lỗi: " + error.response.data.message);
                                });
                            }, function () { });
                        },
                    }
                },
                {
                    title: "Tiêu đề báo cáo",
                    field: "subject",
                    sortable: true,
                },
                {
                    title: "Email nhận",
                    field: "toEmails",
                    sortable: true,
                },
                {
                    title: "Trạng thái",
                    field: "sent",
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.sent == true)
                            return "<span class='badge bg-success bg-opacity-10 text-success'>Thành công</span>";
                        else if (row.sent == false)
                            return "<span class='badge bg-danger  bg-opacity-10 text-danger'>Lỗi</span>";
                        else
                            return "<span class='badge bg-secondary  bg-opacity-10 text-secondary'>Đang chờ</span>";
                    },
                },
                {
                    title: "Số lần gửi",
                    field: "numberOfResend",
                    sortable: true,
                },
                {
                    title: "Thời gian tạo",
                    field: 'createdDate',
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.createdDate) {
                            var createdDate = moment(row.createdDate).format('DD/MM/YYYY HH:mm:ss');
                            return "<span class ='black'> " + createdDate + "  </span>";
                        }
                    },
                },
                {
                    title: "Thời gian gửi",
                    field: 'timeSent',
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.timeSent) {
                            var timeSent = moment(row.timeSent).format('DD/MM/YYYY HH:mm:ss');
                            return "<span class ='black'> " + timeSent + "  </span>";
                        }
                    },
                },
                {
                    title: "Nội dung",
                    field: "body",
                    sortable: true,
                },
                {
                    title: "File",
                    field: "attachFile",
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.attachFile)
                            return ` <div style="white-space: nowrap;" > <a href="javascript:;" class='badge bg-success bg-opacity-10 text-success download' > ` + row.attachFile + `</a> &nbsp; </div>`;
                    },
                    events: {
                        'click .download': function (e, value, row) {
                            _dBSendEmail.download(row);
                        },
                    }
                },
            ],
            data: [],
            
            columns_selected: [
                {
                    title: "Stt",
                    field: 'sothutu',
                    sortable: true,
                    formatter: (value, row, index) => {
                        var stt = index + 1;
                        return "<span class ='black'> " + stt + "  </span>";
                    },
                },
                {
                    title: "Trạng thái",
                    field: "sent",
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.sent == true)
                            return "<span class='badge bg-success bg-opacity-10 text-success'>Thành công</span>";
                        else if (row.sent == false)
                            return "<span class='badge bg-danger  bg-opacity-10 text-danger'>Lỗi</span>";
                        else
                            return "<span class='badge bg-secondary  bg-opacity-10 text-secondary'>Đang chờ</span>";
                    },
                },
                {
                    title: 'Thời gian gửi',
                    field: 'scheduleUserName',
                    sortable: true,
                    formatter: (value, row, index) => {
                        if (row.timeSent) {
                            var timeSent = moment(row.timeSent).format('DD/MM/YYYY HH:mm:ss');
                            return "<span class ='black'> " + timeSent + "  </span>";
                        }
                    },
                },
                {
                    title: 'Nội dung',
                    field: 'messageLog',
                    sortable: true,
                },
            ],
            data_selected: [],

            options: {
                search: true,
                pagination: true,
                showExtendedPagination: true,
                sortable: true,
                searchAlign: 'right',
                paginationHAlign: 'left',
                paginationDetailHAlign: 'right',
                pageSize: 25,
                pageList: [10, 25, 50, 100, 200],
            },

            filter: {
                columnTable: "",
                actived: "1",
                key: "",
                organizationId: "0",
                export: "0",
                dateTimeFilter: formatDateTime(new Date()),
                startDate: formatDateTime(new Date()),
                endDate: formatDateTime(new Date()),
            },

            object: {
                dateNow: formatDateTime(new Date()),
                form_tile: '',
                editAction: false,
                infoAction: false,
                bearerAuthorization: {
                    headers: { Authorization: `Bearer @Model`, 'Content-Type': 'application/json' }
                }
            },

            data_Total: {},
            item: {},
            combobox: { organizations: [], },
        },
        methods: {
            loadData() {
                $('.loader').show();
                axios.get('/api/v1/DashBoard/GetTotalSendEmail', this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login')) {
                        window.location = window.location.href;
                    }
                    $('.loader').delay(100).hide(0);

                    this.data = [];
                    if (response.data.succeeded) {
                        this.data_Total = response.data.data;
                    }
                    else {
                        alertify.notify(response.data.message, 'error', 6, function () { });
                    }


                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                });
            },
            onClickCell(status) {
                this.filter.Sent = status;
                $('#FSent').val(status).trigger('change');
                this.onFilter();
            },
            onFilter() {
                $('.loader').show();
                axios.post('/api/v1/SendEmail/Gets', this.filter, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;
                    $('.loader').delay(100).hide(0);


                    this.data = response.data.data;
                    bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelInfo_SendEmail')).show();
                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                    console.log(error);
                });

            },
            onPopupModelEdit(row, editAction) {
                this.item = row;
                axios.get('/api/v1/SendEmailLog/Detail?id=' + this.item.id, this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('~/Account/Login'))
                        window.location = window.location.href;

                    $('.loader').delay(100).hide(0);
                    if (response.data.succeeded)
                        this.data_selected = response.data.data;

                }).catch(error => {
                    $('.loader').delay(100).hide(0);
                    console.log(error);
                });
                bootstrap.Modal.getOrCreateInstance(document.getElementById('ModelAddEdit_SendEmail')).show();
            },
            loadCombox() {
                axios.get('/api/v1/Organization/Gets', this.object.bearerAuthorization).then(response => {
                    if (response.request.responseURL.includes('Auth/Login')) {
                        window.location = window.location.href;
                    }
                    this.combobox.organizations = [{ id: "0", organizationName: "Tất cả" }, ...response.data.data];
                }).catch(error => {
                    console.warn(error);
                });
            },
        },
        mounted() {
            this.loadData();
            this.loadCombox()
        },
    })
</script>
